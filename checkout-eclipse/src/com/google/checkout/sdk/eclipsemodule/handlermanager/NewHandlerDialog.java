/*******************************************************************************
 * Copyright (C) 2007 Google Inc.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 ******************************************************************************/

package com.google.checkout.sdk.eclipsemodule.handlermanager;

import com.google.checkout.sdk.eclipsemodule.common.CheckoutConfigManager;
import com.google.checkout.sdk.eclipsemodule.integrationwizard.panels.WizardPageUtils;

import org.eclipse.core.resources.IProject;
import org.eclipse.jface.dialogs.Dialog;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.DirectoryDialog;
import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Listener;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Text;

import java.io.File;

public class NewHandlerDialog extends Dialog {
  // True if the "update handler manager" checkbox is selected
  private boolean updateHandlerManager;
  
  private Button browseButton;
  private Button updateCheckBox;
  
  // CheckoutConfigManager used only to get message types
  private CheckoutConfigManager configManager;
  
  private Combo implementationComboBox;
  private Combo messageClassComboBox;
  private Combo messageTypeComboBox;
  
  // New handler information generated by this dialog
  private HandlerCreationData handlerData;
  
  // currently selected project
  private IProject project;
  
  private Label classNameLabel;
  private Label createdFileLabel;
  private Label implementationLabel;
  private Label locationLabel;
  private Label messageClassLabel;
  private Label messageTypeLabel;
  private Label packageLabel;
  private Label projectLabel;

  private Text classNameTextField;
  private Text createdFileTextField;
  private Text locationTextField;
  private Text packageTextField;
  private Text projectTextField;


  private final static String[] MESSAGE_CLASSES = {"Notification", "Callback"};
  private final static String[] IMPLEMENTATION = {"Empty Class"};

  public NewHandlerDialog(Shell parent, IProject project) {
    super(parent);

    this.project = project;
    this.handlerData = new HandlerCreationData();
    this.configManager = new CheckoutConfigManager();
  }

  @Override
  protected Point getInitialSize() {
    return new Point(600, 400);
  }

  @Override
  protected Control createDialogArea(Composite parent) {
    GridData gd;
    Composite composite = (Composite) super.createDialogArea(parent);

    // create the desired layout for this wizard page
    GridLayout gl = new GridLayout();
    int ncol = 3;
    gl.numColumns = ncol;
    composite.setLayout(gl);

    // create the widgets. If the appearance of the widget is different from the
    // default, create a GridData for it to set the alignment and how much space
    // it will occupy
    gd = new GridData();
    gd.horizontalSpan = ncol - 2;

    classNameLabel = new Label(composite, SWT.NULL);
    classNameLabel.setLayoutData(gd);
    classNameLabel.setText("Class Name: ");

    gd = new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan = ncol - 1;

    classNameTextField = new Text(composite, SWT.BORDER);
    classNameTextField.addListener(SWT.KeyUp, new Listener() {
      public void handleEvent(Event evt) {
        createdFileUpdater();
      }
    });
    classNameTextField.setText("NewHandler");
    classNameTextField.setLayoutData(gd);

    gd = new GridData();
    gd.horizontalSpan = ncol - 2;

    projectLabel = new Label(composite, SWT.NULL);
    projectLabel.setLayoutData(gd);
    projectLabel.setText("Project: ");

    gd = new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan = ncol - 1;

    projectTextField = new Text(composite, SWT.BORDER);
    projectTextField.setEnabled(false);
    projectTextField.setLayoutData(gd);

    gd = new GridData();
    gd.horizontalSpan = ncol - 2;
    gd.horizontalAlignment = SWT.LEFT;

    locationLabel = new Label(composite, SWT.NULL);
    locationLabel.setText("Location: ");
    locationLabel.setLayoutData(gd);

    gd = new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan = ncol - 2;

    locationTextField = new Text(composite, SWT.BORDER);
    locationTextField.addListener(SWT.KeyUp, new Listener() {
      public void handleEvent(Event evt) {
        createdFileUpdater();
      }
    });
    locationTextField.setLayoutData(gd);

    gd = new GridData();
    gd.horizontalAlignment = SWT.RIGHT;
    gd.horizontalSpan = ncol - 2;

    browseButton = new Button(composite, SWT.NULL);
    browseButton.addListener(SWT.Selection, new Listener() {
      public void handleEvent(Event evt) {
        browseButtonActionPerformed();
      }
    });
    browseButton.setText("Browse");
    browseButton.setLayoutData(gd);
    
    gd = new GridData();
    gd.horizontalSpan = ncol - 2;

    packageLabel = new Label(composite, SWT.NULL);
    packageLabel.setText("Package: ");
    packageLabel.setLayoutData(gd);

    gd = new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan = ncol - 1;

    packageTextField = new Text(composite, SWT.BORDER);
    packageTextField.addListener(SWT.KeyUp, new Listener() {
      public void handleEvent(Event evt) {
        createdFileUpdater();
      }
    });
    packageTextField.setLayoutData(gd);

    gd = new GridData();
    gd.horizontalSpan = ncol - 2;

    createdFileLabel = new Label(composite, SWT.NULL);
    createdFileLabel.setText("Created File: ");
    createdFileLabel.setLayoutData(gd);

    gd = new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan = ncol - 1;

    createdFileTextField = new Text(composite, SWT.BORDER);
    createdFileTextField.setEditable(false);
    createdFileTextField.setLayoutData(gd);

    WizardPageUtils.createLine(composite, ncol);

    gd = new GridData();
    gd.horizontalSpan = ncol - 2;

    messageClassLabel = new Label(composite, SWT.NULL);
    messageClassLabel.setText("Message Class: ");
    messageClassLabel.setLayoutData(gd);

    gd = new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan = ncol - 1;

    messageClassComboBox = new Combo(composite, SWT.READ_ONLY | SWT.SIMPLE);
    messageClassComboBox.setItems(MESSAGE_CLASSES);
    messageClassComboBox.addListener(SWT.Selection, new Listener() {
      public void handleEvent(Event evt) {
        messageClassComboBoxItemStateChanged();
      }
    });
    messageClassComboBox.setLayoutData(gd);
    messageClassComboBox.select(0);

    gd = new GridData();
    gd.horizontalSpan = ncol - 2;

    messageTypeLabel = new Label(composite, SWT.NULL);
    messageTypeLabel.setText("Message Type: ");
    messageTypeLabel.setLayoutData(gd);

    gd = new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan = ncol - 1;

    messageTypeComboBox = new Combo(composite, SWT.READ_ONLY | SWT.SIMPLE);
    messageTypeComboBox.addListener(SWT.Selection, new Listener() {
      public void handleEvent(Event evt) {
        messageTypeComboBoxItemStateChanged();
      }
    });
    messageTypeComboBox.setLayoutData(gd);

    gd = new GridData();
    gd.horizontalSpan = ncol - 2;

    implementationLabel = new Label(composite, SWT.NULL);
    implementationLabel.setText("Implementation: ");
    implementationLabel.setLayoutData(gd);

    gd = new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan = ncol - 1;

    implementationComboBox = new Combo(composite, SWT.READ_ONLY | SWT.SIMPLE);
    implementationComboBox.setItems(IMPLEMENTATION);
    implementationComboBox.addListener(SWT.Selection, new Listener() {
      public void handleEvent(Event evt) {
        implementationComboBoxItemStateChanged();
      }
    });
    implementationComboBox.setLayoutData(gd);
    implementationComboBox.select(0);

    gd = new GridData(GridData.FILL_HORIZONTAL);
    gd.horizontalSpan = ncol;

    updateCheckBox = new Button(composite, SWT.CHECK);
    updateCheckBox.addListener(SWT.Selection, new Listener() {
      public void handleEvent(Event evt) {
        updateCheckBoxActionPerformed();
      }
    });
    updateCheckBox.setText("Update Handler Manager with new handler");
    updateCheckBox.setSelection(true);
    updateHandlerManager = true;
    updateCheckBox.setLayoutData(gd);
    
    projectTextField.setText(project.getName());
    locationTextField.setText(
        project.getWorkspace().getRoot().getLocationURI().toString().substring(5) 
        + "/" + project.getName());

    messageClassComboBoxItemStateChanged();
    messageTypeComboBoxItemStateChanged();
    implementationComboBoxItemStateChanged();
    createdFileUpdater();
    
    // add controls to composite as necessary
    return composite;
  }

  /*************************************************************************/
  /*                            EVENT HANDLERS                             */
  /*************************************************************************/

  private void messageClassComboBoxItemStateChanged() {
    String[] types;
    String selectedItem =
        messageClassComboBox.getItem(messageClassComboBox.getSelectionIndex());

    if (selectedItem.equals("Callback")) {
      types = configManager.getCallbackTypes();
    } else {
      types = configManager.getNotificationTypes();
    }

    messageTypeComboBox.removeAll();

    if (types.length > 0) {
      for (int i = 0; i < types.length; i++) {
        messageTypeComboBox.add(types[i]);
      }
      messageTypeComboBox.select(0);
    }
    
    // Update data
    String handlerClass = 
      messageClassComboBox.getItem(messageClassComboBox.getSelectionIndex());
    
    if (handlerClass.equals("Notification")) {
      handlerData.setHandlerClass(HandlerCreationData.NOTIFICATION);
    } else if (handlerClass.equals("Callback")) {
      handlerData.setHandlerClass(HandlerCreationData.CALLBACK);
    }
  }
  
  private void createdFileUpdater() {
    String path = locationTextField.getText();
    if (!path.startsWith("/")) {
      path = "/" + path;
    }
    if (!path.endsWith("/")) {
      path += "/";
    }
    path += packageTextField.getText().replace(".", "/");
    if (!path.endsWith("/")) {
      path += "/";
    }
    path += classNameTextField.getText() + ".java";
    createdFileTextField.setText(path);
    
    // Get new package
    String handlerPackage = packageTextField.getText().replace("/", ".");
    if (handlerPackage.endsWith(".")) {
      handlerPackage = handlerPackage.substring(0, handlerPackage.length()-1);
    }
    
    // Update data
    handlerData.setHandlerName(classNameTextField.getText());
    handlerData.setHandlerPackage(handlerPackage);
    handlerData.setHandlerLocation(createdFileTextField.getText());
  }

  private void messageTypeComboBoxItemStateChanged() {
    String handlerType = 
      messageTypeComboBox.getItem(messageTypeComboBox.getSelectionIndex());
    handlerData.setHandlerType(handlerType);
  }

  private void implementationComboBoxItemStateChanged() {
    String handlerImpl = 
      implementationComboBox.getItem(implementationComboBox.getSelectionIndex());
    if (handlerImpl.equals("Empty Class")) {
      handlerData.setHandlerImpl(HandlerCreationData.EMPTY_CLASS);
    }
  }

  private void updateCheckBoxActionPerformed() {
    updateHandlerManager = updateCheckBox.getSelection();
  }

  private void browseButtonActionPerformed() {
    // Generate and show the file chooser
    DirectoryDialog dd = new DirectoryDialog(getShell());
    dd.setText("WEB-INF Directory");
    dd.setFilterPath(locationTextField.getText());
    File selectedFile = new File(dd.open());
    
    if (selectedFile != null) {
      String text = selectedFile.getPath();
      locationTextField.setText(text);
    }
    
    createdFileUpdater();
  }
  
  /*************************************************************************/
  /*                          PUBLIC ACCESSORS                             */
  /*************************************************************************/
  
  public HandlerCreationData getHandlerCreationData() {
    return handlerData;
  }
  
  public boolean updateHandlerManager() {
    return updateHandlerManager;
  }
}
