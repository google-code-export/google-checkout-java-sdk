/*******************************************************************************
 * Copyright (C) 2007 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 ******************************************************************************/

package com.google.checkout.sdk.nbmodule.handlermanager;

import com.google.checkout.sdk.module.common.CheckoutConfigManager;
import com.google.checkout.sdk.module.handlermanager.HandlerCreationData;
import java.io.File;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import org.netbeans.api.project.Project;
import org.netbeans.api.project.ProjectInformation;
import org.openide.filesystems.FileUtil;
import org.openide.windows.WindowManager;

public class NewHandlerPanel extends javax.swing.JPanel {
  
  // Combo box models
  DefaultComboBoxModel projectModel;
  DefaultComboBoxModel messageClassModel;
  DefaultComboBoxModel messageTypeModel;
  DefaultComboBoxModel implementationModel;
  
  // Currently selected project
  Project project;
  
  // CheckoutConfigManager used only to get message types
  CheckoutConfigManager configManager;
  
  // New handler information generated by this panel
  HandlerCreationData handlerData;
  
  // True if the "update handler manager" checkbox is selected
  boolean updateHandlerManager;
  
  /** Creates new form NewHandlerPanel */
  public NewHandlerPanel(Project project) {
    this.project = project;
    handlerData = new HandlerCreationData();
    updateHandlerManager = true;
    
    // Init models
    messageClassModel = new DefaultComboBoxModel();
    messageTypeModel = new DefaultComboBoxModel();
    implementationModel = new DefaultComboBoxModel();
    configManager = new CheckoutConfigManager();
    
    initComponents();
    initProject();
    initStaticModels();
  }
  
  /*************************************************************************/
  /*                            INITIALIZERS                               */
  /*************************************************************************/
  
  private void initProject() {
    ProjectInformation info = (ProjectInformation)project.getLookup().lookup(ProjectInformation.class);
    projectTextField.setText(info.getDisplayName());
    locationTextField.setText(project.getProjectDirectory().getPath());
  }
  
  private void initStaticModels() {
    // Initialize the list of message classes
    messageClassModel.addElement("Notification");
    messageClassModel.addElement("Callback");
    
    // Initialize the list of implementation types
    implementationModel.addElement("Empty Class");
  }
  
  /*************************************************************************/
  /*                          PUBLIC ACCESSORS                             */
  /*************************************************************************/
  
  public HandlerCreationData getHandlerCreationData() {
    return handlerData;
  }
  
  public boolean updateHandlerManager() {
    return updateHandlerManager;
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        classNameLabel = new javax.swing.JLabel();
        classNameTextField = new javax.swing.JTextField();
        locationLabel = new javax.swing.JLabel();
        createdFileLabel = new javax.swing.JLabel();
        createdFileTextField = new javax.swing.JTextField();
        separator = new javax.swing.JSeparator();
        messageTypeLabel = new javax.swing.JLabel();
        messageTypeComboBox = new javax.swing.JComboBox();
        implementationLabel = new javax.swing.JLabel();
        implementationComboBox = new javax.swing.JComboBox();
        updateCheckBox = new javax.swing.JCheckBox();
        messageClassLabel = new javax.swing.JLabel();
        messageClassComboBox = new javax.swing.JComboBox();
        locationTextField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        projectLabel = new javax.swing.JLabel();
        packageLabel = new javax.swing.JLabel();
        packageTextField = new javax.swing.JTextField();
        projectTextField = new javax.swing.JTextField();

        classNameLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        classNameLabel.setText("Class Name:");

        classNameTextField.setText("NewHandler");
        classNameTextField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                createdFileUpdater(evt);
            }
        });

        locationLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        locationLabel.setText("Location:");

        createdFileLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        createdFileLabel.setText("Created File:");

        createdFileTextField.setEditable(false);

        messageTypeLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        messageTypeLabel.setText("Message Type:");

        messageTypeComboBox.setModel(messageTypeModel);
        messageTypeComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                messageTypeComboBoxItemStateChanged(evt);
            }
        });

        implementationLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        implementationLabel.setText("Implementation:");

        implementationComboBox.setModel(implementationModel);
        implementationComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                implementationComboBoxItemStateChanged(evt);
            }
        });

        updateCheckBox.setFont(new java.awt.Font("Dialog", 0, 12));
        updateCheckBox.setSelected(true);
        updateCheckBox.setText("Update Handler Manager with new handler");
        updateCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        updateCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        updateCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCheckBoxActionPerformed(evt);
            }
        });

        messageClassLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        messageClassLabel.setText("Message Class:");

        messageClassComboBox.setModel(messageClassModel);
        messageClassComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                messageClassComboBoxItemStateChanged(evt);
            }
        });

        locationTextField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                createdFileUpdater(evt);
            }
        });

        browseButton.setText("Browse");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        projectLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        projectLabel.setText("Project:");

        packageLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        packageLabel.setText("Package:");

        packageTextField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                createdFileUpdater(evt);
            }
        });

        projectTextField.setEditable(false);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(classNameLabel)
                            .add(projectLabel)
                            .add(locationLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(classNameTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(locationTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(browseButton))
                            .add(projectTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)))
                    .add(separator, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(messageClassLabel)
                        .add(17, 17, 17)
                        .add(messageClassComboBox, 0, 271, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(messageTypeLabel)
                            .add(implementationLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(implementationComboBox, 0, 271, Short.MAX_VALUE)
                            .add(messageTypeComboBox, 0, 271, Short.MAX_VALUE)))
                    .add(updateCheckBox)
                    .add(layout.createSequentialGroup()
                        .add(createdFileLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(createdFileTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(packageLabel)
                        .add(32, 32, 32)
                        .add(packageTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(classNameLabel)
                    .add(classNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(projectLabel)
                    .add(projectTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(locationLabel)
                    .add(browseButton)
                    .add(locationTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(packageLabel)
                    .add(packageTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(createdFileLabel)
                    .add(createdFileTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(separator, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(messageClassLabel)
                    .add(messageClassComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(messageTypeComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(messageTypeLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(implementationLabel)
                    .add(implementationComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(updateCheckBox)
                .addContainerGap(17, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /*************************************************************************/
    /*                           EVENT HANDLERS                              */
    /*************************************************************************/
    
    private void updateCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCheckBoxActionPerformed
      updateHandlerManager = updateCheckBox.isSelected();
    }//GEN-LAST:event_updateCheckBoxActionPerformed
    
    private void implementationComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_implementationComboBoxItemStateChanged
      String handlerImpl = (String) implementationComboBox.getSelectedItem();
      if (handlerImpl.equals("Empty Class")) {
        handlerData.setHandlerImpl(HandlerCreationData.EMPTY_CLASS);
      }
    }//GEN-LAST:event_implementationComboBoxItemStateChanged
    
    private void messageTypeComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_messageTypeComboBoxItemStateChanged
      String handlerType = (String) messageTypeComboBox.getSelectedItem();
      handlerData.setHandlerType(handlerType);
      
    }//GEN-LAST:event_messageTypeComboBoxItemStateChanged
    
    private void createdFileUpdater(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_createdFileUpdater
      String path = locationTextField.getText();
      if (!path.startsWith("/")) {
        path = "/" + path;
      }
      if (!path.endsWith("/")) {
        path += "/";
      }
      path += packageTextField.getText().replace(".", "/");
      if (!path.endsWith("/")) {
        path += "/";
      }
      path += classNameTextField.getText() + ".java";
      createdFileTextField.setText(path);
      
      // Get new package
      String handlerPackage = packageTextField.getText().replace("/", ".");
      if (handlerPackage.endsWith(".")) {
        handlerPackage = handlerPackage.substring(0, handlerPackage.length()-1);
      }
      
      // Update data
      handlerData.setHandlerName(classNameTextField.getText());
      handlerData.setHandlerPackage(handlerPackage);
      handlerData.setHandlerLocation(createdFileTextField.getText());
    }//GEN-LAST:event_createdFileUpdater
    
    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
      // Generate and show the file chooser
      File file = FileUtil.toFile(project.getProjectDirectory());
      JFileChooser jfc = new JFileChooser(file);
      jfc.setDialogTitle("WEB-INF Directory");
      jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
      jfc.showOpenDialog(WindowManager.getDefault().getMainWindow());
      
      // Fill the samples directory text field with the located directory
      File selectedFile = jfc.getSelectedFile();
      if (selectedFile != null) {
        String text = selectedFile.getPath();
        locationTextField.setText(text);
      }
    }//GEN-LAST:event_browseButtonActionPerformed
    
    private void messageClassComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_messageClassComboBoxItemStateChanged
      if (evt.getStateChange() == evt.SELECTED) {
        String[] types;
        String selectedItem = (String) messageClassComboBox.getSelectedItem();
        if (selectedItem.equals("Callback")) {
          types = configManager.getCallbackTypes();
        } else {
          types = configManager.getNotificationTypes();
        }
        messageTypeModel.removeAllElements();
        for (int i=0; i<types.length; i++) {
          messageTypeModel.addElement(types[i]);
        }
      }
      
      // Update data
      String handlerClass = (String) messageClassComboBox.getSelectedItem();
      if (handlerClass.equals("Notification")) {
        handlerData.setHandlerClass(HandlerCreationData.NOTIFICATION);
      } else if (handlerClass.equals("Callback")) {
        handlerData.setHandlerClass(HandlerCreationData.CALLBACK);
      }
    }//GEN-LAST:event_messageClassComboBoxItemStateChanged
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JLabel classNameLabel;
    private javax.swing.JTextField classNameTextField;
    private javax.swing.JLabel createdFileLabel;
    private javax.swing.JTextField createdFileTextField;
    private javax.swing.JComboBox implementationComboBox;
    private javax.swing.JLabel implementationLabel;
    private javax.swing.JLabel locationLabel;
    private javax.swing.JTextField locationTextField;
    private javax.swing.JComboBox messageClassComboBox;
    private javax.swing.JLabel messageClassLabel;
    private javax.swing.JComboBox messageTypeComboBox;
    private javax.swing.JLabel messageTypeLabel;
    private javax.swing.JLabel packageLabel;
    private javax.swing.JTextField packageTextField;
    private javax.swing.JLabel projectLabel;
    private javax.swing.JTextField projectTextField;
    private javax.swing.JSeparator separator;
    private javax.swing.JCheckBox updateCheckBox;
    // End of variables declaration//GEN-END:variables
    
}
