/*******************************************************************************
 * Copyright (C) 2007 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 ******************************************************************************/

package com.google.checkout.sdk.nbmodule.integrationwizard.panels;

import com.google.checkout.sdk.nbmodule.common.CheckoutConfigManager;
import com.google.checkout.sdk.nbmodule.integrationwizard.CheckoutIntegrationPanel;
import com.google.checkout.sdk.nbmodule.integrationwizard.IntegrationWizardDescriptor;
import com.google.checkout.sdk.nbmodule.integrationwizard.Settings;
import java.awt.Color;
import java.awt.Component;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JPanel;
import javax.swing.event.ChangeListener;
import org.openide.util.HelpCtx;


public final class ConfigWizardPanel extends JPanel {
  
  // Integration settings, built by this wizard
  private Settings settings;
  
  private IntegrationWizardDescriptor wizardDescriptor;
  /**
   * Creates the checkout-config.xml editing panel for the Integration Wizard.
   */
  public ConfigWizardPanel() {
    initComponents();
    
    warningLabel.setForeground(getBackground());
  }
  
  public boolean isValid() {
    boolean valid = (!merchantIdTextField.getText().equals("") 
          && !merchantKeyTextField.getText().equals("") 
          && !currencyCodeTextField.getText().equals(""));
    
    if (valid) {
      warningLabel.setForeground(getBackground());
    }
    else
    {
      warningLabel.setForeground(Color.RED);
    }
    
    return valid;
  }

  public void setIntegrationWizardDescriptor(IntegrationWizardDescriptor iwd)
  {
    wizardDescriptor = iwd;
  }
  
  public void updateState() {
    if (wizardDescriptor != null) 
    {
      wizardDescriptor.updateState();
    }
  }
  
  /**
   * Returns the name for this panel, which is used in the wizard as both the
   * title and the name of each step.
   *
   * @return Name of this panel
   */
  public String getName() {
    return "Create Config File";
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
  private void initComponents() {
    configLabel = new javax.swing.JLabel();
    configTextField = new javax.swing.JTextField();
    separator1 = new javax.swing.JSeparator();
    merchantIdLabel = new javax.swing.JLabel();
    merchantKeyLabel = new javax.swing.JLabel();
    merchantIdTextField = new javax.swing.JTextField();
    merchantKeyTextField = new javax.swing.JTextField();
    envComboBox = new javax.swing.JComboBox();
    envLabel = new javax.swing.JLabel();
    currencyCodeLabel = new javax.swing.JLabel();
    currencyCodeTextField = new javax.swing.JTextField();
    warningLabel = new javax.swing.JLabel();

    configLabel.setFont(new java.awt.Font("Dialog", 0, 12));
    org.openide.awt.Mnemonics.setLocalizedText(configLabel, "This will place checkout-config at:");

    configTextField.setEditable(false);

    merchantIdLabel.setFont(new java.awt.Font("Dialog", 0, 12));
    org.openide.awt.Mnemonics.setLocalizedText(merchantIdLabel, "Merchant ID:");

    merchantKeyLabel.setFont(new java.awt.Font("Dialog", 0, 12));
    org.openide.awt.Mnemonics.setLocalizedText(merchantKeyLabel, "Merchant Key:");

    merchantIdTextField.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyReleased(java.awt.event.KeyEvent evt) {
        merchantIdTextFieldKeyReleased(evt);
      }
    });

    merchantKeyTextField.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyReleased(java.awt.event.KeyEvent evt) {
        merchantKeyTextFieldKeyReleased(evt);
      }
    });

    envComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Sandbox", "Production" }));

    envLabel.setFont(new java.awt.Font("Dialog", 0, 12));
    org.openide.awt.Mnemonics.setLocalizedText(envLabel, "Environment:");

    currencyCodeLabel.setFont(new java.awt.Font("Dialog", 0, 12));
    org.openide.awt.Mnemonics.setLocalizedText(currencyCodeLabel, "Currency Code:");

    currencyCodeTextField.setText("USD");
    currencyCodeTextField.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyReleased(java.awt.event.KeyEvent evt) {
        currencyCodeTextFieldKeyReleased(evt);
      }
    });

    warningLabel.setFont(new java.awt.Font("Dialog", 0, 10));
    warningLabel.setForeground(new java.awt.Color(255, 51, 51));
    org.openide.awt.Mnemonics.setLocalizedText(warningLabel, "Please fill in the fields for all textboxes");

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(layout.createSequentialGroup()
        .addContainerGap()
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
          .add(configTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
          .add(configLabel)
          .add(layout.createSequentialGroup()
            .add(merchantKeyLabel)
            .add(19, 19, 19)
            .add(merchantKeyTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE))
          .add(separator1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
          .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
            .add(merchantIdLabel)
            .add(28, 28, 28)
            .add(merchantIdTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE))
          .add(layout.createSequentialGroup()
            .add(envLabel)
            .add(26, 26, 26)
            .add(envComboBox, 0, 275, Short.MAX_VALUE))
          .add(layout.createSequentialGroup()
            .add(currencyCodeLabel)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(currencyCodeTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 85, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
          .add(warningLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 284, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(layout.createSequentialGroup()
        .addContainerGap()
        .add(configLabel)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(configTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(separator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(merchantIdTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
          .add(merchantIdLabel))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(merchantKeyTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
          .add(merchantKeyLabel))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(envLabel)
          .add(envComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(currencyCodeLabel)
          .add(currencyCodeTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 102, Short.MAX_VALUE)
        .add(warningLabel)
        .addContainerGap())
    );
  }// </editor-fold>//GEN-END:initComponents

    /*************************************************************************/
    /*                           EVENT HANDLERS                              */
    /*************************************************************************/
  
  private void merchantIdTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_merchantIdTextFieldKeyReleased
    updateState();
  }//GEN-LAST:event_merchantIdTextFieldKeyReleased

  private void currencyCodeTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_currencyCodeTextFieldKeyReleased
    updateState();
  }//GEN-LAST:event_currencyCodeTextFieldKeyReleased

  private void merchantKeyTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_merchantKeyTextFieldKeyReleased
    updateState();
  }//GEN-LAST:event_merchantKeyTextFieldKeyReleased
    
    /*************************************************************************/
    /*                          SWING VARIABLES                              */
    /*************************************************************************/
    
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel configLabel;
  private javax.swing.JTextField configTextField;
  private javax.swing.JLabel currencyCodeLabel;
  private javax.swing.JTextField currencyCodeTextField;
  private javax.swing.JComboBox envComboBox;
  private javax.swing.JLabel envLabel;
  private javax.swing.JLabel merchantIdLabel;
  private javax.swing.JTextField merchantIdTextField;
  private javax.swing.JLabel merchantKeyLabel;
  private javax.swing.JTextField merchantKeyTextField;
  private javax.swing.JSeparator separator1;
  private javax.swing.JLabel warningLabel;
  // End of variables declaration//GEN-END:variables
    
    /*************************************************************************/
    /*                          UTILITY METHODS                              */
    /*************************************************************************/
    
    private void updatePanel() {
      // Get the default checkout-config.xml if one doesn't already exist
      if (settings.getConfigManager().getOutputLocation() == null) {
        settings.getConfigManager().setOutputLocation(settings.getWebInfDirectory().toURI().
            resolve("checkout-config.xml").getPath());
      }
      
      // Set the checkout-config.xml field
      configTextField.setText(settings.getConfigManager().getOutputLocation());
      
      // Fill the text fields
      CheckoutConfigManager configManager = settings.getConfigManager();
      merchantIdTextField.setText(configManager.getMerchantId());
      merchantKeyTextField.setText(configManager.getMerchantKey());
      currencyCodeTextField.setText(configManager.getCurrencyCode());
      
      // Select the drop down item
      DefaultComboBoxModel model = 
          (DefaultComboBoxModel) envComboBox.getModel();
      int index = model.getIndexOf(configManager.getEnv());
      if (index >= 0) {
        envComboBox.setSelectedIndex(index);
      }
    }
    
    private void recordSettings() {
      // Save the text field info
      CheckoutConfigManager configManager = settings.getConfigManager();
      configManager.setMerchantId(merchantIdTextField.getText());
      configManager.setMerchantKey(merchantKeyTextField.getText());
      configManager.setEnv((String)envComboBox.getSelectedItem());
      configManager.setCurrencyCode(currencyCodeTextField.getText());
    }
    
    /*************************************************************************/
    /*                         SETTINGS ACCESSORS                            */
    /*************************************************************************/
    
    public Settings getSettings() {
      return settings;
    }
    
    public void setSettings(Settings settings) {
      this.settings = settings;
    }
    
    /*************************************************************************/
    /*                       WIZARD DESCRIPTOR PANEL                         */
    /*************************************************************************/
    
    public static class Panel implements CheckoutIntegrationPanel {
      // The visual component of this panel
      private ConfigWizardPanel component;
      
      public Component getComponent() {
        if (component == null) {
          component = new ConfigWizardPanel();
        }
        return component;
      }
      
      public void setIntegrationWizardDescriptor(IntegrationWizardDescriptor iwd) {
        component.setIntegrationWizardDescriptor(iwd);
      }
      
      public HelpCtx getHelp() {
        return HelpCtx.DEFAULT_HELP;
      }
      
      /**
       *  Determines whether the Next and Finish buttons are enabled and 
       *  disabled.
       *
       *  @return True if the Next and Finish buttons should be enabled;
       *          otherwise false.
       */
      public boolean isValid() {
        return component.isValid();
      }
      
      public final void addChangeListener(ChangeListener l) {}
      public final void removeChangeListener(ChangeListener l) {}
      
      public void readSettings(Object settings) {
        // Read shared info from the wizard descriptor
        IntegrationWizardDescriptor descriptor = 
            (IntegrationWizardDescriptor) settings;
        component.setSettings(descriptor.getSettings());
        
        // Update the config file's name
        component.updatePanel();
      }
      
      public void storeSettings(Object settings) {
        // Record the page state into settings
        component.recordSettings();
        
        // Write shared info to the wizard descriptor
        IntegrationWizardDescriptor descriptor = 
            (IntegrationWizardDescriptor) settings;
        descriptor.setSettings(component.getSettings());
      }
    }
}

