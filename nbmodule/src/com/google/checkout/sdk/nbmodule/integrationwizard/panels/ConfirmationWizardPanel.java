/*******************************************************************************
 * Copyright (C) 2007 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 ******************************************************************************/

package com.google.checkout.sdk.nbmodule.integrationwizard.panels;

import com.google.checkout.sdk.nbmodule.integrationwizard.CheckoutIntegrationPanel;
import com.google.checkout.sdk.nbmodule.integrationwizard.IntegrationWizardDescriptor;
import com.google.checkout.sdk.nbmodule.integrationwizard.Settings;
import java.awt.Component;
import java.io.File;
import javax.swing.JPanel;
import javax.swing.event.ChangeListener;
import org.openide.util.HelpCtx;

public final class ConfirmationWizardPanel extends JPanel {
  
  // Integration settings, built by this wizard
  private Settings settings;
  
  /**
   * Creates the samples selection panel for the Integration Wizard.
   */
  public ConfirmationWizardPanel() {
    initComponents();
  }
  
  /**
   * Returns the name for this panel, which is used in the wizard as both the
   * title and the name of each step.
   *
   * @return Name of this panel
   */
  public String getName() {
    return "Confirm Changes";
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        confirmLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        changesTextArea = new javax.swing.JTextArea();
        launchHandlerManagerCheckBox = new javax.swing.JCheckBox();

        confirmLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        org.openide.awt.Mnemonics.setLocalizedText(confirmLabel, "Clicking \"Finish\" with have the following effects:");

        changesTextArea.setColumns(20);
        changesTextArea.setEditable(false);
        changesTextArea.setRows(5);
        jScrollPane1.setViewportView(changesTextArea);

        org.openide.awt.Mnemonics.setLocalizedText(launchHandlerManagerCheckBox, "Run the Handler Manager after this wizard");
        launchHandlerManagerCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        launchHandlerManagerCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        launchHandlerManagerCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                launchHandlerManagerCheckBoxActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                    .add(confirmLabel)
                    .add(launchHandlerManagerCheckBox))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(confirmLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(launchHandlerManagerCheckBox)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    
    /*************************************************************************/
    /*                           EVENT HANDLERS                              */
    /*************************************************************************/
    
    private void launchHandlerManagerCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_launchHandlerManagerCheckBoxActionPerformed
      // Update settings
      boolean selected = launchHandlerManagerCheckBox.isSelected();
      settings.setLaunchHandlerManager(selected);
    }//GEN-LAST:event_launchHandlerManagerCheckBoxActionPerformed
    
    /*************************************************************************/
    /*                          SWING VARIABLES                              */
    /*************************************************************************/
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea changesTextArea;
    private javax.swing.JLabel confirmLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox launchHandlerManagerCheckBox;
    // End of variables declaration//GEN-END:variables
    
    /*************************************************************************/
    /*                          UTILITY METHODS                              */
    /*************************************************************************/
    
    private void updatePanel() {
      // Update changes text area
      String changes = "";
      
      changes = "Modify " + 
          settings.getProject().getProjectDirectory().getName() + "\n\n";
      changes += "- Add checkout-sdk.jar to your WEB_INF/lib directory\n";
      if (settings.getModifiedWebXml() != null) {
        changes += "- Modify " + shorten(settings.getWebXmlFile()) + "\n";
      }
      changes += "- Create " + shorten(settings.getWebInfDirectory()) + 
          "/checkout-config.xml\n";
      if (settings.addSamples()) {
        changes += "- Add sample JSPs to " + 
            shorten(settings.getSamplesDirectory()) + "\n";
      }
      
      changesTextArea.setText(changes);
      
      // Update run handler manager check box
      launchHandlerManagerCheckBox.setSelected(settings.launchHandlerManager());
    }
    
    private String shorten(File file) {
      String full = file.getPath();
      if (full.startsWith("/")) {
        full = full.substring(1);
      }
      String prefix = settings.getProject().getProjectDirectory().getPath();
      if (!prefix.endsWith("/")) {
        prefix += "/";
      }
      return full.replace(prefix, "");
    }
    
    /*************************************************************************/
    /*                         SETTINGS ACCESSORS                            */
    /*************************************************************************/
    
    public Settings getSettings() {
      return settings;
    }
    
    public void setSettings(Settings settings) {
      this.settings = settings;
    }
    
    /*************************************************************************/
    /*                       WIZARD DESCRIPTOR PANEL                         */
    /*************************************************************************/
    
    static public class Panel implements CheckoutIntegrationPanel {
      // The visual component of this panel
      private ConfirmationWizardPanel component;
      
      public Component getComponent() {
        if (component == null) {
          component = new ConfirmationWizardPanel();
        }
        return component;
      }
      
      public void setIntegrationWizardDescriptor(IntegrationWizardDescriptor iwd)
      {
      }
      
      public HelpCtx getHelp() {
        return HelpCtx.DEFAULT_HELP;
      }
      
      /**
       *  Determines whether the Next and Finish buttons are enabled and 
       *  disabled.
       *
       *  @return True if the Next and Finish buttons should be enabled;
       *          otherwise false.
       */
      public boolean isValid() {
        return true;
      }
      
      public final void addChangeListener(ChangeListener l) {}
      public final void removeChangeListener(ChangeListener l) {}
      
      public void readSettings(Object settings) {
        // Read shared info from the wizard descriptor
        IntegrationWizardDescriptor descriptor = 
            (IntegrationWizardDescriptor) settings;
        component.setSettings(descriptor.getSettings());
        
        // Update the panel with a list of current changes
        component.updatePanel();
      }
      
      public void storeSettings(Object settings) {
        // Write shared info to the wizard descriptor
        IntegrationWizardDescriptor descriptor = 
            (IntegrationWizardDescriptor) settings;
        descriptor.setSettings(component.getSettings());
      }
    }
}

